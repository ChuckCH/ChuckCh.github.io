---
layout: post
title:  "Redis深度历险:核心原理和应用实践"
categories: jekyll update
---

<a href="https://zhuanlan.zhihu.com/p/32540678" target="_blank">天下无难试</a>

5种数据结构 string、list、set、hash、zset

**string** 类似ArrayList，预分配内存，小于1M扩容加倍，一次扩容最多1M，字符串最大长度512M

**list** 类似LinkedList，插入删除O(1)，索引定位O(n)，常做异步队列，将任务塞进list，另一线程轮询

**慢操作** lindex 性能随index变大而增差 ltrim同理，

redis底层用的quicklist，元素较少时 ziplist，连续内存，元素较多时，用quicklist将多个ziplist用双向指针串起来。

**hash** 类似HashMap 数组+链表 为了性能采用渐进式rehash 

**set** 类似HashSet

**zset** 类似SortedSet+HashMap 跳跃列表 层级制，每隔几个元素挑出代表，随即策略决定新元素可以到达第几层

![](/images/屏幕截图_20211108170333.png)

通用规则 create if not exists；drop if no elements

分布式锁 一般适用setnx（set if not exusts）用完了再del  如果执行出现异常，可能会导致无法调用del 进而死锁，所以一般需加上过期时间。但setnx 和expire不是原子操作，还是会出现问题。Redis 2.8 修复了这一问题，set lock true ex 5 nx

<blockquote style="font-size:15px" >
  <ul>
    <li>EX seconds − 设置指定的到期时间(以秒为单位)。</li>
    <li>PX milliseconds - 设置指定的到期时间(以毫秒为单位)。</li>
    <li>NX - 仅在键不存在时设置键。</li>
    <li>XX - 只有在键已存在时才设置。</li>
  </ul>
</blockquote>

如果任务时间大于锁过期时间，那么第一个任务的释放锁操作释放了第二个任务的锁，第三个任务会提前拿到锁。会导致超时问题。

**可重入性**  如果一个锁支持同一线程多次加速，那么就是可重入的， Redis如果需要支持可重入 ，需对set进行包装，使用线程ThreadLocal变量存储当前锁的计数。

延时队列 对可靠性要求不高时可用。rpush+lpop or lpush+rpop 
blpop/brpop blocking 阻塞读解决队列延迟 无数据休眠，有数据则读。但可能有空闲链接问题，客户端注意捕获异常。

**锁冲突** 

1. 直接抛出异常
2. sleep
3. 请求转移至延时队列

**位图** getbit/setbit 类似于字符串或byte数组 支持按位存按位取，即零存整取，零存零取，整存零取。bitpos查第一个0/1，bitcount查数量。可指定[start，end]。但参数是字节索引，即必须为8的倍数。

**HyperLogLog** pfadd 和 pfcount 内存占用12k 不太精确的计数

**布隆过滤器** 不太精确的记录是否出现

**简单限流** zset按时间戳存。取一段时间的总数量进行比较。

**漏斗限流** redis-cell

**GeoHash 算法** geoadd geodist geopos geohash georadiusbymember

 **Scan** 

**原理**

**线程 IO 模型** 多路复用

​	Redis是单线程程序

​	非阻塞io即NIO 读写不阻塞，取决于内核为套接字分配的空间

​	什么时候读写什么时候继续上次的读写 事件轮询机制

​	指令队列 响应队列

​	如有定时任务，会存放在最小堆中，每个循环周期执行一遍，最近需要执行的用作下一周期的timeout

**通讯协议**

​	RESP(Redis Serialization Protocol) 共5种 以\r\n结束

​		1单行字符串 +开头 +hello world\r\n

​		2 多行字符串 $+字符串长度 $11\r\nhello world\r\n $11\r\nhello \r\nworld\r\n

​		3整数值 ：+整数的字符串 :1024\r\n

​		4错误消息 -开头 -WRONGTYPE Operation against a key holding the wrong kind of value

​		5数组 *+数组长度 *3\r\n:1\r\n:2\r\n:3\r\n

​	client -> service set author codehole 会被序列化成 *3\r\n$3\r\nset\r\n$6\r\nauthor\r\n$8\r\ncodehole\r\n

​		控制台下 *3 

​						$3 

​						set 

​						$6 

​						author 

​						$8 

​						codehole

​	service -> client 

​		127.0.0.1:6379> set author codehole 

​		OK  //+OK

​		127.0.0.1:6379> incr author 

​		(error) ERR value is not an integer or out of range // -ERR value is not an integer or out of range

​		127.0.0.1:6379> incr books 

​		(integer) 1 // :1

### 快照

​	多进程 COW Copy On Write 写入是写入复制的页面，存储是快照的页面。

​	glibc的fork函数	

### AOF 原理

​	AOF日志记录内存修改的指令，指令先校验，然后存储到AOF 即先存到磁盘，再执行。可以重放恢复redis状态

​	AOF重写  bgrewriteaof background rewrite aof  用子进程 遍历内存形成新的AOF

​	fsync 
